Argon RTOS Todo List
====================

Ideas
-----

√ Refactor list management code.
√ Add constructors and copy constructors.
√ Get global object lists working.
√ Implement timers.
√ Implement priority inheritence for mutexes.
√ Finish user interrupt support.
√ Clean up member function support for threads.
x Add Thread::join()?
x More thorough testing using cppunit. [Massive effort to get cppunit compiling under IAR.]
- Unprivileged support?
x Event flags?
x Invert thread priorities, so that 0 is highest priority? This is the more common arrangement for RTOSes.
√ Floating point support for M4F.
√ Use circular linked lists instead of NULL terminated.
√ Use a lock on the scheduler instead of disabling interrupts.
- Handle a thread changing its own priority when it owns a mutex and has been hoisted in priority.
√ Check the IPSR to determine whether it is in an IRQ, so the irq depth doesn't have to be manually adjusted.
√ Sort thread sleeping list by wakeup time.
- Add link from thread to object it's blocked on. (?)
√ Make scheduler smart enough to do round robin using beginning of ready list since that list is sorted by priority. i.e., it doesn't need to scan the entire list.
* Support tickless idle.
- High resolution timers. Tickless idle could be used to support timers with resolutions higher than a tick.
x Use MSP for idle thread and timers. (?)
- Handle changing system clock by updating SysTick. Need to add API?
√ Proper Cortex-M RTOS support (no IRQ disabling, reduced locking, etc).
x Replace queue with buffered channel?
√ Add an internal utility function to get whether we're in an IRQ; use it instead of checking IRQ depth.
x Use nullptr instead of NULL (provide compatibility macro for pre-C++11).
√ Replace IrqDisableAndRestore class with a more generic kernel lock class that will work for Cortex-M as well as any other system.
* Write an automated test suite.
√ Rewrite mutex to not be based on sem.
√ Unblock blocked threads when deleting a queue.
√ Simplify Thread class variants.
* Run main() in a thread.
√ Add option to create threads resumed.
- Have an installable error handler to deal with errors in ctors. (?)
√ armcc support
√ gcc support
- Reduce kernel object sizes as much as possible.
- Make ar_kernel_run() set the current thread to the idle thread so the scheduler doesn't need a special case the first time it is executed.
- Improve thread init and port APIs so the Thread class doesn't require an extra entry point wrapper.
x Add port kernel data struct so the extended frame flag can be included in g_ar. (Really useful?)
- Separate tick timer routine sources so they can easily be replaced by the user (or make weak).
- Do we even need the suspended thread list? (used for cpu usage and thread reports)
- Deal with wrapping of tick counter.
- Clean up enter_scheduler() vs ar_port_service_call() usage, switch threads.
√ Save stack bottom instead of top in thread struct?
√ Support member function callbacks in Timer.
√ Remove m_createdNode members of kernel object structs if AR_GLOBAL_OBJECT_LISTS is not set.
- Need to be able to restart a thread once it has completed execution.
√ Make _ar_thread_t::block() enter the scheduler itself, to reduce duplicated code. Same with unblockWithStatus() when the unblocked thread is highest priority.
- Move more internal stuff into Ar namespace.
x Consider possibilities of run-to-completion threads that share a stack.
√ Add a user deferred call mechanism that works from ISRs. [use run loops]
- Channels only need one blocked list.
√ Some timer object code is included even if timers are not used in the application. [Fixed with runloops.]
x Reset MSP when kernel starts so there is no wasted stack space.
- Rename _halt() to ar_port_halt_cpu().
√ Restore stack size or stack top in thread struct so we can compute stack usage.
x ar_kernel_enter_scheduler() no longer does anything but call ar_port_service_call(). Merge the two.
- Add kernel event recording/trace capability, with ability to report via ITM.
- Limit channel and queue element size to a single word. (?)
√ Add run loops.
√ Move code that handles timer one-shot vs periodic from idle thread to new timer invoke() routine.
x Return errors for non-zero timeouts in calls from timers, like for ISRs. (?)
- Normalize channel and queue class send() and receive() methods' use of ptrs, references, or by value.
- Add a common header to kernel object structs with type and name pointer?
- Change to a single ar_object_get_name() API?
- Can we replace the ar_list_node_t object pointer member with a calculation of node struct offset from the header of the containing kernel object struct?
x Change function pointer types to not be pointers, then make params etc pointers.
- Remove "m_" from kernel object member names since they are public and accessed directly?
√ Make kernel object class destructors non-virtual, except for Thread; no virtual methods, and this will save a vptr&table for each class.
√ Remove "2" on ar_post_deferred_action2() and use overloading.
- Run kernel in privileged mode and use SVCall for most kernel APIs?
√ KernelLock doesn't need a member to store saved state because g_ar.lockCount can be used.
√ Have scheduler compute thread CPU usage.
- Remove need for idle thread by staying in scheduler until a thread becomes ready.
- Add optional support for blocks.
- Abstracted MPU support.
- Replace tick counter with 64-bit microsecond time.
√ Move g_ar.allObjects to its own global variable.
√ Add a sleep until API.
x Share a common timeout list for timers and blocked threads?
- Main thread needs to be able to stop by returning from main()
√ Use a function pointer table for deferred kernel actions to solve issue with bringing in lots of code into link.
- Replace main thread support with API to turn main() into a thread and start scheduler.
√ _ar_list::remove() has an unnecessary search loop, should only be used in list-check mode.
√ Handle all thread states in ar_thread_suspend().
- Add config option for enabling dynamic stack allocation option, so malloc() is not required.
√ Handle needsReschedule from within a deferred action in the same PendSV invocation, so PendSV is not immediately re-entered.
- Need a kernel object that can broadcast to wake up multiple threads.
- Add thread stack usage to ar_thread_status_t and compute in ar_thread_get_report().
√ Calling ar_timer_set_delay() from within periodic timer callback will result in double delay, since ar_kernel_run_timers() will reschedule it again; use flag in timer to solve.
- Let user allocate runloop function call queue.
√ Either implement runloop channel support or remove related APIs.
- Provide option to coalesce function calls added to runloop queue.
- Add config option to compute thread stack usage and provide via ar_thread_get_report().
- Free dynamically allocated stack when thread is deleted.
√ Handle case where a timer would fire again while it is executing.
x Track time spent in scheduler.
- Protect thread stacks with MPU.
√ Allow timers to be stopped from timer callback.
- Consider replacing special member function callback support with member function thunk class.
* Only defer irq operations if the kernel is locked, otherwise execute immediately.
√ Change ar_runloop_run() to return ar_status_t instead of its own type.
- Remove queue and channel handler function support from runloops?
- Only run the scheduler when we know we need to switch threads. (maybe already the case)
- Only handle round-robin in the tick timer (except for tickless).
- Make thread load computation work for tickless idle.
√ Return error from all APIs that cannot be called from IRQ when invoked from IRQ.
√ Support 16- and 8-bit atomic operations.
- Use 16-bit atomic operations to reduce deferred action and runloop perform queue struct sizes (indexes).
- Move to a solely tickless architecture.
- Change kernel flags to bool so writes are atomic.
- Switch to using C11 or C++11 atomics? (increases code size noticeably)


Issues
------

x Use of timers requires another stack.
√ Timers all share a single stack.
- Idle thread requires a stack.
√ Interrupts are disabled to protect kernel objects.
x System load has garbage value if idle thread is only run to invoke timers.
x It's very unintuitive to have default ctor for sem, mutex, channel? not actually init the object.
? Sometimes deferred actions are not being executed as soon as the kernel is unlocked, or the kernel is not being properly unlocked, causing a situation where the deferred action queue can overflow.
? Idle thread will WFI sometimes when we don't want it to, like when running timers back to back.
- Blocking the idle thread will cause the scheduler to assert.


Renaming
--------

ar::thread
ar::thread_with_stack<S>
ar::sem
ar::mutex
ar::mutex::guard
ar::base_chan
ar::chan<T>
ar::tchan<T>
ar::base_queue
ar::queue<T,N>
ar::bufchan<T,N>
ar::timer


Tickless idle
-------------

- Change to higher res than 10 ms.
- Losing bits of time all over the place as we enable and disable the timer.
√ Round robin for threads with the same priority doesn't work.

- Use a two timer model
    - One timer for a µs wall clock
    - Another timer as the wakeup timer


Notes
-----

- need to clear SysTick COUNTFLAG when locking in ar_port_set_lock()?

- kernel locking:
    - don't disable timer
    - instead, make timer isr check if kernel is locked and if so simply record that the timer fired
    - when the kernel is unlocked, check timer fired flag and if set call real timer handler


with virtual dtors:
sizeof(ar_thread_t)=72; sizeof(Thread)=84
sizeof(ar_channel_t)=36; sizeof(Channel)=36
sizeof(ar_semaphore_t)=28; sizeof(Semaphore)=32
sizeof(ar_mutex_t)=40; sizeof(Mutex)=44
sizeof(ar_queue_t)=56; sizeof(Queue)=60
sizeof(ar_timer_t)=52; sizeof(Timer)=60

without virtual dtors:
sizeof(ar_thread_t)=72; sizeof(Thread)=84
sizeof(ar_channel_t)=36; sizeof(Channel)=36
sizeof(ar_semaphore_t)=28; sizeof(Semaphore)=28
sizeof(ar_mutex_t)=40; sizeof(Mutex)=40
sizeof(ar_queue_t)=56; sizeof(Queue)=56
sizeof(ar_timer_t)=52; sizeof(Timer)=56



Run loops
---------

- Features:
    - timers
    - deferred function calls
    - sources
        - queue
        - channel
        - sem?

- Merge timers and function calls?
    - Timers would just be function calls with a delay and/or period

void my_thread(void * arg)
{
    Ar::RunLoop loop;
    Ar::Timer tmrA("a", do_tmr_a, kArPeriodicTimer, 50);
    Ar::Timer tmrB("b", d_tmr_b, kArPeriodicTimer, 120);
    loop.addTimer(tmrA);
    loop.addTimer(tmrB);
    loop.addQueue(someQ);

    while (1)
    {
        uintptr_t value;
        switch (loop.run(&value))
        {
            case kArRunLoopQueueSource:
                break;
            case kArRunLoopStopped:
                break;
        }
    }
}

void someq_handler(ar_queue_t * queue, uintptr_t receivedData)
{
    if (receivedData == 1)
    {
        ar_runloop_stop(ar_runloop_get_current());
    }
}

void my_thread2(void * arg)
{
    ar_runloop_t rl;
    ar_runloop_create(&rl);

    ar_timer_t tmra;
    ar_timer_create(&tmra, "a", tmra_cb, 0, kArPeriodicTimer, 50);

    ar_runloop_add_timer(&rl, &tmra);
    ar_runloop_add_queue(&rl, &myq, NULL); // no handler, causes runloop to exit

    ar_runloop_perform(&rl, my_cb);

    ar_runloop_add_queue(&rl, &someq, someq_handler); // handler provided, handled without exiting runloop

    ar_channel_t chan;
    ar_channel_create(&chan, "chan", 0);
    ar_runloop_add_channel(&rl, &chan);

    while (1)
    {
        void * obj;
        uintptr_t value;
        switch (ar_runloop_run(&rl, 0, &obj, &value))
        {
            case kArRunLoopQueueSource:
                if (obj == &myq)
                {
                    printf("received %d on queue myq\n", value);
                }
                break;
            case kArRunLoopChannelReceived:
                if (obj == &chan)
                {
                    printf("received %d on channel chan\n", value);
                }
                break;
            case kArRunLoopStopped:
                break;
        }
    }
}

void rl_blocks()
{
    __block int i = 0;
    ar_timer_t tmrb;
    ar_timer_create_block(&tmrb, "b", kArPeriodicTimer, 120, ^(){
        ++i;
    });
    ar_runloop_add_timer(&rl, &tmrb);

    ar_runloop_perform_block(&rl, ^(){
        // do something
    });
}



