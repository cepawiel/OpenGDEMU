é”˜**
 * \file
 *
 * \brief Getting Started with SAM4C
 *
 * Copyright (c) 2014-2018 Microchip Technology Inc. and its subsidiaries.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Subject to your compliance with these terms, you may use Microchip
 * software and any derivatives exclusively with Microchip products.
 * It is your responsibility to comply with third party license terms applicable
 * to your use of third party software (including open source software) that
 * may accompany Microchip software.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
 * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
 * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL MICROCHIP BE
 * LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL
 * LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE
 * SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
 * POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT
 * ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY
 * RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
 * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
 *
 * \asf_license_stop
 *
 */

/**
\defgroup BOARD_FEATURE board feature
The SAM4C-EK is an evaluation kit featuring
- SAM4C16C device LQFP100 package with optional socket footprint
- On-board 8MHz and 32.769KHz crystal
- A segment LCD display with backlight
- A USB-to-COM port for debugging
- Serial Flash memory
- An AT24C1024 EEPROM and an AT30TS758 temperature sensor
- LEDs, push buttons
- JTAG/ICE port
- USART port with RS232 driver multiplexed with RS485 function with driver.
*/

/**
\defgroup DEV_TOOLS development tools
- Atmel Studio 6.1: http://www.microchip.com/mplab/avr-support/atmel-studio-7
- IAR Embedded Workbench for ARM 6.50.5:
  http://www.iar.com/en/Products/IAR-Embedded-Workbench/ARM/
  - SAM4C patch for IAR Embedded Workbench for eariler version of IAR:
    <i>ewarm add-on v0.1.1.zip</i> (provided with the application note)
- Segger J-Link (v4.75d or above): http://www.segger.com/download_jlink.html
- SAM-BA (v2.12): http://www.microchip.com/developmenttools/ProductDetails/atmel%20sam-ba%20in-system%20programmer
  - SAM4C patch for SAM-BA v2.12: <i>sam-ba_2.12_patchsam4c.exe</i>
    (provided with the application note)
- ASF (v3.11.1 or above): http://www.microchip.com/tools/avrsoftwareframework.aspx
*/

/**
\defgroup AS6_USAGE Studio usage
- Atmel Studio 6.1 (or above) installed
- Atmel Software Framework (ASF) v3.11.1 or above
- Segger J-Link installed
- SAM4C-EK board connected to Atmel Studio through SAM-ICE and powered on
*/

/**
\defgroup IAR_USAGE IAR usage
- ASF 3.11.1 or above standalone package installed
- IAR Embedded Workbench for ARM 6.50.5 installed
- SAM4C patch for IAR Embedded Workbench installed
- Segger J-Link v4.75d or above installed
- SAM4C-EK board connected to IAR Embedded Workbench for ARM through SAM-ICE and
  powered on
*/

/**
\defgroup SAM-BA_REQ SAM-BA requirement
- Atmel Studio 6.1 (or above) installed
- ASF 3.11.1 or above standalone package installed
- SAM-BA v2.12 and SAM4C patch for it installed
- Segger J-Link v4.75d or above installed
- SAM4C-EK board connected to SAM-BA through SAM-ICE and powered on
*/

/**
\defgroup SAM-BA_LOAD SAM-BA load binary
- Open SAM-BA
- Select <i>\\jlink\\ARM0</i> (could be ARM1, 2 or other number) as the
  connection
- Select <i>at91sam4c16-ek</i> as the target board. Then press \a Connect
- In SAM-BA GUI, choose \a Flash tab
- For <i>Send File Name</i>, choose the binary file
  (i.e., <i>getting-started_flash.bin</i>) generated previously
- Specify the address (e.g., 0x01000000 if non-cached), then press
  <i>Send File</i>
- For Scripts, select <i>Boot from Flash (GPNVM1)</i>, then press \a Execute
*/

/**
\defgroup GS_SPEC getting-started example specification
The getting-started example makes two LEDs on the board blink at a fixed rate.
This rate is generated by using a timer for the first LED, and a wait function
based on a 1 ms tick for the second LED. The blinking can be stopped using two
buttons - one for each LED.
*/

/**
\defgroup BUTTONS buttons on the board
The SAM4C-EK features six push-buttons, FWUP, NRST, TMP0, TMP2, SCROLL-UP and
SCROLL-DOWN, connected to pins FWUP, NRST, TMP0, PB27, PA19, and PA20
respectively.

Usually, the NRST is used to reset the MCU and the FWUP is usded to wakeup MCU 
from low power modes, while the other four are used for general purpose,
which can force a logical low level on the corresponding PIO line when pressed.

The Getting-started example uses SCROLL-UP and SCROLL-DOWN buttons with the
internal hardware debouncing circuitry embedded in the SAM4C.
*/

/**
\defgroup LEDS LEDs on the board
There are four LEDs on the SAM4C Evaluation Kit. D8, D9, D10 are used for
general purpose, which are connected to PC8, PC7, and PC6 respectively. D5 is
the power LED. 

Both D9 and D10 are used in the getting-started example.
*/

/**
\defgroup COM COM port on the board
UART0 of the SAM4C is connected to the USB-to-COM port (UART) on the SAM4C-EK.
*/

/**
\defgroup CONF_CLOCK about conf_clock.h
In the <i>conf_clock.h</i>, the system clock source (\c CONFIG_SYSCLK_SOURCE)
and system clock prescaler (\c CONFIG_SYSCLK_PRES) must be defined. In the case
of the getting-started example, since the Phase Lock Loop block (PLLB) is used
to multiply the frequency of the system clock, PLLB source, factor and divider
are defined.
*/

/**
\defgroup SYS_CLOCK system clock setting
As shown in the code above, the exteneral crystal oscillator
(\c PLLB_SRC_MAINCK_XTAL) is selected as the PLLB source
(\c CONFIG_PLL1_SOURCE).
The factor (\c CONFIG_PLL1_MUL) and divider (\c CONFIG_PLL1_DIV) are defined
respectively. PLLB (\c SYSCLK_SRC_PLLBCK) is chosen as the system clock
source (\c CONFIG_SYSCLK_SOURCE), the prescaler of which (\c CONFIG_SYSCLK_PRES)
is defined as SYSCLK_PRES_1.
*/

/**
\defgroup CLOCK_FORMULA system clock formula
<tt>SYSCLK = XTAL * MUL / DIV / PRES = 8MHz * 30 / 2 / 1 = 120MHz</tt>
*/

/**
\defgroup HOW_IT_WORKS how the example works
In the getting-started example, two buttons control two LEDs in two ways. When
SCROLL-DOWN button is pressed, the pin connected to LED D10 toggles its output.
When SCROLL-UP button is pressed, the TC channel is stopped or restarted. In
both ways, two LEDs stop or start blinking.
*/

/**
\defgroup CORE1_CLOCK coprocessor clock
Because PIOC, which controls the LEDs, is attached to Matrix1, the clock for
the coprocessor must be enabled.
\anchor code_coprocessor_clock_configuration
<b>Code: Coprocessor Clock Configuration</b>
\snippet conf_clock.h conf_coprocessor_clock_settings
As shown in the code above, MCK (\c CPCLK_SRC_MCK) is selected as the source of
coprocessor clock (\c CONFIG_CPCLK_SOURCE). And the prescaler
(\c CONFIG_CPCLK_PRES) is defined as 1.
*/
/*
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */



